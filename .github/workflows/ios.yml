name: iOS starter workflow

on: workflow_dispatch # so manually run on my test branch
  #push:
  #  branches: [ "main" ]
  #pull_request:
  #  branches: [ "main" ]

jobs:
  build:
    name: Build and Test default scheme using any available iPhone simulator
    runs-on: macos-latest

    steps:
      - name: Configure Git for private repo
        run: git config --global url."https://${{ secrets.CH_IOS_AUTOMATED }}@github.com/".insteadOf "https://github.com/"
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set Default Scheme
        run: |
          scheme_list=$(xcodebuild -list -json | tr -d "\n")
          default=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")
          echo $default | cat >default
          echo Using default scheme: $default
      - name: Build
        env:
          scheme: ${{ 'default' }}
          platform: ${{ 'iOS Simulator' }}
        run: |
          # xcrun xctrace returns via stderr, not the expected stdout (see https://developer.apple.com/forums/thread/663959)
          device=`xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//"`
          if [ $scheme = default ]; then scheme=$(cat default); fi
          if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
          file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
          xcodebuild build-for-testing -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$device" OTHER_SWIFT_FLAGS="-DQA_TESTING"
      #- name: Test
      #  env:
      #    scheme: ${{ 'default' }}
      #    platform: ${{ 'iOS Simulator' }}
      #  run: |
      #    # xcrun xctrace returns via stderr, not the expected stdout (see https://developer.apple.com/forums/thread/663959)
      #    device=`xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//"`
      #    if [ $scheme = default ]; then scheme=$(cat default); fi
      #    if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
      #    file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
      #    xcodebuild test-without-building -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$device"

      - name: Locate the .app file
        id: find_app
        run: |
          # Find the .app file in the DerivedData output. 
          # The exact path can vary based on your project setup.
          APP_PATH=$(find ./build -name "Connected_Hydration_iOS.app" | head -n 1)
          echo "Found .app file at: $APP_PATH"
          echo "app_path=$APP_PATH" >> $GITHUB_OUTPUT

      - name: Upload .app as artifact
        uses: actions/upload-artifact@v4
        with:
          name: Connected_Hydration_iOS
          path: ${{ steps.find_app.outputs.app_path }}
          retention-days: 7 # Optional: Set how long to keep the artifact
